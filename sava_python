import requests
import json
import datetime

##############Square variables#############
today = datetime.datetime.now()
# find out what the date was 7 days ago
d = datetime.timedelta(days=90)
dateSub = today - d
# format date to work in API request
weekAgo = dateSub.strftime("%Y-%m-%dT%H:%M:%S")

# high level payment info
url = 'https://connect.squareup.com/v2/payments'
urlDate = 'https://connect.squareup.com/v2/payments?begin_time=' + weekAgo

SquareKey = "EAAAETiZWYursLwLLN-X1Y7PsDCMaG_dWmK1Ivk_B8enyhuv_XA3gKJUQZQL_l7h"
header = {'Square-Version': '2020-05-28', 'Authorization': 'Bearer ' + str(SquareKey), 'Content-Type': 'application/json'}

r = requests.get(urlDate, headers=header)
content = r.content

# parse json data
my_json = content.decode('utf8')
resp = json.loads(my_json)
#################Square variables#############


############## QBO Info #####################
prodQBO = 'https://quickbooks.api.intuit.com'
sandQBO = 'https://sandbox-quickbooks.api.intuit.com'
QBid = '4620816365059481960'
key2 = 'eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiZGlyIn0..kaRDzoQoUuFRDqgIN3bZmQ.k_MKC9drQZbkoNDGRNk9acGxHAt-DyF_1nACHRiEH2paqx8tq-ZP-td6xIo0-T8LkcsiSvaPfZPdlHwu3YT2jtGvQdVz6XTtMFViPrEQhFn_Gu16fY-ocjGZJ98E2rP42aC2SvvPz1C9yEaSJWgPgsGZbY4bSf-3fGzJV9gZEKK6pgvYknES0GBEVC-EWY1PJRnY0p1Mx_9TCCyZSlboVvAoJlteYayfTAGHSfbgbWWGDZXXxEx7Dz-AmAJqWkP0voWWnA6BlcVx75vkgAN9MR8kGuGTkLDi94MaVrSPQj8-OWhKMjpikTuFbtjTaDqiQJ5FjmAGpHxPYTwbNvpA6tI8xihoJk-jdKnP8Px4Tm3VrDp2Zd4jYhILnqlk8ZoJS7WjxsjnLo79vZogzv5vxBLlCwnmZQAzuZNpXwC_vZ1I5t2gV7BUUuiyk1YV6RvfLISOOjLbIL1goehUi-G_6tcWyV5xrRVUBIjKJnzTqZ8uojCzrnrSF0cq5sQ6tRuWoEvils0jhpQN7cZO_22JvvAux0xWaIc_9tFnIM5Jf0MwO9IYpgQTf-X4BStCnHM5xywO3fRUGqOHFgMICnv7lveD0F4XqLyQ54HyFtRnWpUKlJsSQp9Rn61_N-sK0-F3naxnWNgDJfEEB9nk81VxwLJV6GvP_URnkQ-99VHpS7rt83VVZ1n2qnHN77kt268-BuoGF0DDWH7zf6-6G5vfjAt4bC-Bc8BU2amz9V6DeP8.4z1AnSx8HL95uIyd5inP7Q'
qbHead = {'Accept': 'application/json', 'Authorization': 'Bearer ' + str(key2)}


QBpayment = sandQBO+'/v3/company/'+QBid+'/query?query=select * from PaymentMethod&minorversion=51'
QBacct = sandQBO+"/v3/company/4620816365059481960/query?query=select * from Account where Metadata.CreateTime > '2018-12-31'&minorversion=51"

getPay = requests.get(QBpayment, headers=qbHead)
getAcct = requests.get(QBacct, headers=qbHead)

payCont = getPay.content
acctCont = getAcct.content

#json conversions 
pay_json = payCont.decode('utf8')
payResp = json.loads(pay_json)
#json conversions 
acctReq_json = acctCont.decode('utf8')
acctResp = json.loads(acctReq_json)


############## QBO Info #####################

def square_shit():
    print('\n')
    print("Grabbing your orders from square in the last 7 days.....")
    print('\n')
    totRev = 0
    totFee = 0

    for x in resp["payments"]:
        ID = x["id"]
        created = x["created_at"]
        amount = x["amount_money"]["amount"]
        totRev += amount
        cur = x["amount_money"]["currency"]
        locID = x["location_id"]
        orderID = x["order_id"]
        status = x["status"]
        print('+++++++++++++++++++++++++++++++++++++++++++++++')
        print("Payment Status: " + status)
        print("Order ID: " + orderID)
        print("Payment Date: " + created)
        print("Currency: " + cur)
        # square uses 100 for $1, 103 for $1.03, so multiple it by .01
        print("Payment Revenue: " + "$" + str(amount * .01))
        # totalRev+=amount
        # totalNet+=net
        if status != "FAILED":
            try:
                for y in x["processing_fee"]:
                    fee = y["amount_money"]["amount"]
                    totFee += fee
                    net = amount - fee
                    # totalFees+=fee

                    print("Square Fee: " + "$" + str(fee * .01))
                    print("--------------------------")
                    print("Square Net Revenue: " + str(net * .01))
                    print('+++++++++++++++++++++++++++++++++++++++++++++++')
                    print('\n')

            except KeyError:
                print("*This is a Failed Payment*")
        else:
            print("*This is a Failed Payment*")
            totRev -= amount

    netTot = totRev - totFee
    print('\n')
    print('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$')
    print("Total Revenue from last 7 days: " + str(totRev*.01))
    print("Total Fee's from last 7 days: " + str(totFee*.01))
    print("--------------------------------------")
    print('Net Total: ' + str(netTot*.01))
    print('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$')


square_shit()



def QBO_BOI():
	print('\n')
	fonso = input("Would you like to continue to adding this info to QBO? (Enter 'y' to continue) ")
	print(fonso)

	if fonso == 'y': 
		for x in payResp['QueryResponse']['PaymentMethod']: 
			payName = x['Name']
			payID = x['Id']
			#if 'QBO' in payName: 
				#print(payName) 

		for x in acctResp['QueryResponse']['Account']:
			acctName = x['Name']
			acctID = x['Id']
			if 'Atlantic' in acctName:
				urName = acctName
				urID = acctID
				print('We\'ll deposit to: ' +urName +'\nAcct ID is: ' +urID)
			
	else:
		print("END HERE")


QBO_BOI()
		 
