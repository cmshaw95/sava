import requests
import json
import datetime

##############Square variables#############
today = datetime.datetime.now()
# find out what the date was 7 days ago
d = datetime.timedelta(days=90)
dateSub = today - d
# format date to work in API request
weekAgo = dateSub.strftime("%Y-%m-%dT%H:%M:%S")

# high level payment info
url = 'https://connect.squareup.com/v2/payments'
urlDate = 'https://connect.squareup.com/v2/payments?begin_time=' + weekAgo

SquareKey = "EAAAETiZWYursLwLLN-X1Y7PsDCMaG_dWmK1Ivk_B8enyhuv_XA3gKJUQZQL_l7h"
header = {'Square-Version': '2020-05-28', 'Authorization': 'Bearer ' + str(SquareKey), 'Content-Type': 'application/json'}

r = requests.get(urlDate, headers=header)
content = r.content

# parse json data
my_json = content.decode('utf8')
resp = json.loads(my_json)
#################Square variables#############

############## QBO Info #####################
prodQBO = 'https://quickbooks.api.intuit.com'
sandQBO = 'https://sandbox-quickbooks.api.intuit.com'
QBid = '4620816365059481960'
key2 = 'eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiZGlyIn0..XhvfWYHa2O8T2zkDFZjleA.4YxSFOFbEVqR3_Zc0j4xzOJDxvOHmTejXmzYvg7qVzzYKkGTkYibK6u2QTKAiYthTrXLNrlPB33bRSFhxubmoF1U09wAI6NDomdmpHlDr3co2-2VV2xU3MMtfl7gNVui3odY0XzOra23UKd44a4vqF-UXHCPuXC6fPz5X0Nr4FeIev47ZLt2nIRp9Joamqo2E79adHxZrzCIW_F6SdtKecVed3XwijI2yiqpn-Vdu8RcLOnsRvnmeAyIe3lOsd7auhWtT1_dc1Ekn4SBVS6d6pvbO4EEKDDt5mE4JheY30C1eknw9f-x_VkspJDplXr2oL46xaFKR8WOwxWw2s2cJYokVj57aAqJWz3unO3_1hE6apEItb5_D1G8tYJr100JeTUnH1NfBVaVluGjQAMJ5G2lklTaSZIgt0oVFcyGScam8jCM33yB3ZQjZLFv_Sk_9SMdrq78PEezfzYE5oJH5MXNcfcNbMtWaVlSpeestnOaH5ljtfMVfXZblcfeC_gz-MNOnV0udYIpT7dKjNDPuNin5ptKf1SP9Vtl50faFzvVy9FduAwUqn41KxRYYm9hQ7hxnkIOyiRYS2L0o-SlMUKaShCoFh_cvdvASfX9DgOMZ-DMzj-4VrsKeKQoI81yNHaB3U5H36gIP8Pd9w6gGmTzPbLRIGN9OB67VxYRf3b66JzUw7MH6IhkzoQH0-PxMUhdmNUcXEzIDm2ucSZ_3RVaYBTrYBL3Uv7FsRs295s.W76PvE-7jVM1FW5jI_k3xQ'
qbHead = {'Accept': 'application/json', 'Authorization': 'Bearer ' + str(key2)}

#QB URLs 
QBpayment = sandQBO+'/v3/company/'+QBid+'/query?query=select * from PaymentMethod&minorversion=51'
QBacct = sandQBO+"/v3/company/"+QBid+"/query?query=select * from Account where Metadata.CreateTime > '2018-12-31'&minorversion=51"
QBcustomer = sandQBO+"/v3/company/"+QBid+"/query?query=select * from Customer Where Metadata.LastUpdatedTime > '2015-03-01'&minorversion=51"
QBsalesreceipt = sandQBO+'/v3/company/'+QBid+'/salesreceipt?minorversion=51' 

#make requests
getPay = requests.get(QBpayment, headers=qbHead)
getAcct = requests.get(QBacct, headers=qbHead)
getCust = requests.get(QBcustomer, headers=qbHead)


#gather content
payCont = getPay.content
acctCont = getAcct.content
custCont = getCust.content

#json conversions 
pay_json = payCont.decode('utf8')
payResp = json.loads(pay_json)
#json conversions 
acctReq_json = acctCont.decode('utf8')
acctResp = json.loads(acctReq_json)
#json conversions
custReq_json = custCont.decode('utf8')
custResp = json.loads(custReq_json)


############## QBO Info #####################

def square_shit():
    print('\n')
    print("Grabbing your orders from square in the last 7 days.....")
    print('\n')
    totRev = 0
    totFee = 0
    for x in resp["payments"]:
        ID = x["id"]
        created = x["created_at"]
        amount = x["amount_money"]["amount"]
        totRev += amount
        cur = x["amount_money"]["currency"]
        locID = x["location_id"]
        orderID = x["order_id"]
        status = x["status"]
        print('+++++++++++++++++++++++++++++++++++++++++++++++')
        print("Payment Status: " + status)
        print("Order ID: " + orderID)
        print("Payment Date: " + created)
        print("Currency: " + cur)
        # square uses 100 for $1, 103 for $1.03, so multiple it by .01
        print("Payment Revenue: " + "$" + str(amount * .01))
        # totalRev+=amount
        # totalNet+=net
        if status != "FAILED":
            try:
                for y in x["processing_fee"]:
                    fee = y["amount_money"]["amount"]
                    totFee += fee
                    net = amount - fee
                    # totalFees+=fee

                    print("Square Fee: " + "$" + str(fee * .01))
                    print("--------------------------")
                    print("Square Net Revenue: " + str(net * .01))
                    print('+++++++++++++++++++++++++++++++++++++++++++++++')
                    print('\n')

            except KeyError:
                print("*This is a Failed Payment*")
        else:
            print("*This is a Failed Payment*")
            totRev -= amount

    global netTot 
    netTot = (totRev - totFee)*.01
    global useRev 
    useRev = totRev*.01
    global useFee
    useFee = totFee*.01
    print('\n')
    print('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$')
    print("Total Revenue from last 7 days: " + str(totRev*.01))
    print("Total Fee's from last 7 days: " + str(totFee*.01))
    print("--------------------------------------")
    print('Net Total: ' + str(netTot*.01))
    print('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$')


square_shit()



def QBO_BOI():
	print('\n')
	fonso = input("Would you like to continue to add the above sales info to QBO? (Enter 'y' to continue) ")
	print(fonso)
	print('HTTP Status code: '+str(getPay))
	print('\nGathering QBO information.....\n')
	if fonso == 'y': 
		#find the payment method
		for x in payResp['QueryResponse']['PaymentMethod']: 
			payName = x['Name']
			payID = x['Id']
			if 'ACH' in payName: 
				urPayName = payName
				urPayID = payID
				print('Payment method is: '+payName) 

		#find the deposit id 
		for x in acctResp['QueryResponse']['Account']:
			acctName = x['Name']
			acctID = x['Id']
			if 'Atlantic' in acctName:
				urName = acctName
				urID = acctID
				print('We\'ll deposit to: ' +urName)

		for x in custResp['QueryResponse']['Customer']:
			custName = x['DisplayName']
			custID = x['Id']
			if 'Square Online' in custName: 
				urCustName = custName
				urCustID = custID
				print('Customer Name: ' + urCustName)


		fonso2 = input("\nWe\'re about to post this data to a new sales receipt, continue? (Enter 'y' to continue) ")
		print(fonso2)
			
		sales_json = { "Line": [
			  {
			  "Id": "1",
			  "LineNum": 1,
			  "Description": "Test API customer added",
			  "Amount": useRev,
			  "DetailType": "SalesItemLineDetail",
			  "SalesItemLineDetail": {
			   "ServiceDate": "2020-05-17",
			   "ItemRef": {
			   #need to find the right item
			   "value": "8",
			   "name": "Square Rev"
			   },
			   "TaxCodeRef": {
			   "value": "TAX"
			   },
			   "TaxClassificationRef": {
			   "value": "EUC-99990202-V1-00020000"
			   }
			  }
			  }
			 ],
			 "CustomerRef": {
			  "value": urCustID,
			  "name": urCustName
			 },
			 "PaymentMethodRef": {
			  "value": urPayID,
			  "name": urPayName
			 }
			}


		#post data 
		postSalesR = requests.post(QBsalesreceipt, headers=qbHead, json=sales_json)
		print("Data upload status code: ", postSalesR)
		print(sales_json)


	else:
		print("END HERE")




QBO_BOI()
