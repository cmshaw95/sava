import requests
import json
import datetime

##############Square variables#############
today = datetime.datetime.now()
now = today.strftime("%Y-%m-%d")

# find out what the date was 7 days ago
d = datetime.timedelta(days=90)
dateSub = today - d
# format date to work in API request
weekAgo = dateSub.strftime("%Y-%m-%dT%H:%M:%S")

# high level payment info
url = 'https://connect.squareup.com/v2/payments'
urlDate = 'https://connect.squareup.com/v2/payments?begin_time=' + weekAgo

SquareKey = "EAAAETiZWYursLwLLN-X1Y7PsDCMaG_dWmK1Ivk_B8enyhuv_XA3gKJUQZQL_l7h"
header = {'Square-Version': '2020-05-28', 'Authorization': 'Bearer ' + str(SquareKey), 'Content-Type': 'application/json'}

r = requests.get(urlDate, headers=header)
content = r.content

# parse json data
my_json = content.decode('utf8')
resp = json.loads(my_json)
#################Square variables#############

############## QBO Info #####################
prodQBO = 'https://quickbooks.api.intuit.com'
sandQBO = 'https://sandbox-quickbooks.api.intuit.com'
QBid = '4620816365059481960'
key2 = 'eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiZGlyIn0..Wf97aLQtLXXLoO6bmFsJLw.8JXqkf1QgnWLGtzESk0A2s1XVEW2vV_EVTfInNlkGzH20-hg3c7tOW9rFdrNPL6N5VdHy8tQhKwFvi5HzvIOqgvnNQUzsZz5sO6EdFs05Qn74TGs9FkQwpUKX1X44VR2qegGG3uuLtWzhyn-__wQrLrG07C64hWvELXidVnQ-YlcgKd8BO2qGbTeZsaR_gLijquPfyAiZ4dSknClS6sDkPXi-BlQIExj6uUtubKAj_PkKd65mYvH5fAhFSgl8dYypvpjVoVFaquwTCeboGnPoxIa0jiadMqnywVtCKnZnc1qs9LXPqYZeZoP949y2I3Ynw7PawBbcec5T5m59n9wpsccWByLq2m5NvC8IhLXfIsOVRaEvrkPua6NiRgCFzn85IhwPOq2oWaHNJyOavJhqGXmTiM-6MaEZFhcDs60V0uJkX7piAv4sCc5va51JNs6SGVZ-ZZaP8PNoE_le5UO4NlU72OwV0Ty3KzevpBoH9Bt-YRT5m_7om2DmR9DFDkePpWuBvIyRZ---svNXYtpJ5gbE8UXmOmm3NWkXNC3ed_-KKpSDPaZFIsAGqYLIOukxpU4Vkvo4S5Uf-We4T7vGK_4rRkwughPFRJKVoMvFcfBwBAA_Dp9Ypk1As7kWCxrcL_uDYuGc9s3nqHKTM7B_gOYXQDIgTkHloVKcO2Ixq4GC9D1uXyc5CSH4VzS-G24cTTBs-yo47WvKTayDNJmqZYWMiuWj2iu2vpLAu7QK2U-hSY5zSLAGZByX_UyEsFu.h1XHyPpDgLbOIUx9SRaypA'
qbHead = {'Accept': 'application/json', 'Authorization': 'Bearer ' + str(key2)}

#QB URLs 
QBpayment = sandQBO+'/v3/company/'+QBid+'/query?query=select * from PaymentMethod&minorversion=51'
QBacct = sandQBO+"/v3/company/"+QBid+"/query?query=select * from Account where Metadata.CreateTime > '2018-12-31'&minorversion=51"
QBcustomer = sandQBO+"/v3/company/"+QBid+"/query?query=select * from Customer Where Metadata.LastUpdatedTime > '2015-03-01'&minorversion=51"
QBsalesreceipt = sandQBO+'/v3/company/'+QBid+'/salesreceipt?minorversion=51' 
QBitems = sandQBO+'/v3/company/'+QBid+'/query?query=select * from Item maxresults 30&minorversion=51'

#make requests
getPay = requests.get(QBpayment, headers=qbHead)
getAcct = requests.get(QBacct, headers=qbHead)
getCust = requests.get(QBcustomer, headers=qbHead)
getItem = requests.get(QBitems, headers=qbHead)

#gather content
payCont = getPay.content
acctCont = getAcct.content
custCont = getCust.content
itemCont = getItem.content

#json conversions 
pay_json = payCont.decode('utf8')
payResp = json.loads(pay_json)
#json conversions 
acctReq_json = acctCont.decode('utf8')
acctResp = json.loads(acctReq_json)
#json conversions
custReq_json = custCont.decode('utf8')
custResp = json.loads(custReq_json)
#json conversions
itemReq_json = itemCont.decode('utf8')
itemResp = json.loads(itemReq_json)

############## QBO Info #####################

def square_shit():
    print('\n')
    print("Grabbing your orders from square in the last 7 days.....")
    print('\n')
    totRev = 0
    totFee = 0
    for x in resp["payments"]:
        ID = x["id"]
        created = x["created_at"]
        amount = x["amount_money"]["amount"]
        totRev += amount
        cur = x["amount_money"]["currency"]
        locID = x["location_id"]
        orderID = x["order_id"]
        status = x["status"]
        print('+++++++++++++++++++++++++++++++++++++++++++++++')
        print("Payment Status: " + status)
        print("Order ID: " + orderID)
        print("Payment Date: " + created)
        print("Currency: " + cur)
        # square uses 100 for $1, 103 for $1.03, so multiple it by .01
        print("Payment Revenue: " + "$" + str(amount * .01))
        # totalRev+=amount
        # totalNet+=net
        if status != "FAILED":
            try:
                for y in x["processing_fee"]:
                    fee = y["amount_money"]["amount"]
                    totFee += fee
                    net = amount - fee
                    # totalFees+=fee

                    print("Square Fee: " + "$" + str(fee * .01))
                    print("--------------------------")
                    print("Square Net Revenue: " + str(net * .01))
                    print('+++++++++++++++++++++++++++++++++++++++++++++++')
                    print('\n')

            except KeyError:
                print("*This is a Failed Payment*")
        else:
            print("*This is a Failed Payment*")
            totRev -= amount

    global netTot 
    netTot = (totRev - totFee)*.01
    global useRev 
    useRev = totRev*.01
    global useFee
    useFee = totFee*.01
    print('\n')
    print('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$')
    print("Total Revenue from last 7 days: " + str(totRev*.01))
    print("Total Fee's from last 7 days: " + str(totFee*.01))
    print("--------------------------------------")
    print('Net Total: ' + str(netTot))
    print('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$')



def QBO_BOI():
	fonso = input("\nWould you like to continue to gathering the QBO data? (Enter 'y' to continue) ")
	print(fonso)

	if fonso == 'y': 
		print('\nHTTP Status code: ',getPay)
		print('\nGathering QBO information.....\n')
		#find the payment method
		for x in payResp['QueryResponse']['PaymentMethod']: 
			payName = x['Name']
			payID = x['Id']
			if 'ACH' in payName: 
				urPayName = payName
				urPayID = payID
				print('Payment method is: '+payName) 

		#find the deposit id 
		for x in acctResp['QueryResponse']['Account']:
			acctName = x['Name']
			acctID = x['Id']
			if 'Atlantic' in acctName:
				urAcctName = acctName
				urAcctID = acctID
				print('We\'ll deposit to: ' +urAcctName)

		for x in custResp['QueryResponse']['Customer']:
			custName = x['DisplayName']
			custID = x['Id']
			if 'Square Online' in custName: 
				urCustName = custName
				urCustID = custID
				print('Customer Name: ' + urCustName)

		for x in itemResp['QueryResponse']['Item']:
			itemName = x['Name'].lower()
			itemID = x['Id']
			if ('Square Sales').lower() and ('product').lower() in itemName: 
				urItemRevID = itemID
				urItemRevName = itemName
				print('Product/Service Revenue Name: ',urItemRevName) 
			if ('Square fee').lower() in itemName: 
				urItemFeeID = itemID
				urItemFeeName = itemName
				print('Product/Service Fee Name: ',urItemFeeName)


		fonso2 = input("\nWe\'re about to post this data to a new sales receipt, continue? (Enter 'y' to continue) ")
		print(fonso2)

		if fonso2 == 'y': 
			
			sales_json = {
				 "Line": [
				  {
				  "Id": "1",
				  "LineNum": 1,
				  "Description": "Square Revenue",
				  "Amount": useRev,
				  "DetailType": "SalesItemLineDetail",
				  "SalesItemLineDetail": {
				   "ServiceDate": now,
				   "ItemRef": {
				   "value": urItemRevID,
				   "name": urItemRevName
				   },
				   "UnitPrice": useRev,
				   "Qty": 1,
				   "ItemAccountRef": {
				   "value": urCustID,
				   "name": urCustName
				   }
				  }
				  },
				  {
				  "Id": "2",
				  "LineNum": 2,
				  "Description": "Square Fee's",
				  "Amount": "-"+str(useFee),
				  "DetailType": "SalesItemLineDetail",
				  "SalesItemLineDetail": {
				   "ServiceDate": now,
				   "ItemRef": {
				   "value": urItemFeeID,
				   "name": urItemFeeName
				   },
				   "UnitPrice": "-"+str(useFee),
				   "Qty": 1,
				   "ItemAccountRef": {
				   "value": urCustID,
				   "name": urCustName
				   }
				  }
				  },
				  {
				  "Amount": "-"+str(useFee),
				  "DetailType": "SubTotalLineDetail",
				  "SubTotalLineDetail": {}
				  }
				 ],
				 "CustomerRef": {
				  "value": urCustID,
				  "name": urCustName
				 },
				 "PaymentMethodRef": {
				  "value": urPayID,
				  "name": urPayName
				 },
				  "DepositToAccountRef": {
				   "value": urAcctID,
				   "name": urAcctName
				  }
				 }


			#post data 
			postSalesR = requests.post(QBsalesreceipt, headers=qbHead, json=sales_json)
			print("Data upload status code: ", postSalesR)
			

		else: 
			print('\nProgram stopped before uploading data to QBO.')

	else:
		print("\nYou stopped program before we could grab QBO info.")





square_shit()
QBO_BOI()
